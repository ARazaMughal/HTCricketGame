#include <iostream>
using namespace std;

struct Rational
{
	int numenator;
	int denomenator;
};

void reduse(Rational &);
Rational addRational(Rational, Rational);
Rational diffRational(Rational, Rational);
Rational divRational(Rational, Rational);
int main()
{
	Rational r, r1, r2;
	cin >> r1.numenator;
	cin >> r1.denomenator;
	cin >> r2.numenator;
	cin >> r2.denomenator;
	r = addRational(r1, r2);
	//r = diffRational(r1, r2);
	//r = divRational(r1, r2);
	reduse(r);
	cout << r.numenator << "/" << r.denomenator << endl;
	return 0;
}

Rational addRational(Rational r1, Rational r2)
{
	Rational r;
	r.numenator = r1.numenator*r2.denomenator + r2.numenator*r1.denomenator;
	r.denomenator = r1.denomenator*r2.denomenator;
	return r;
}

Rational diffRational(Rational r1, Rational r2)
{
	Rational r;
	r.numenator = r1.numenator*r2.denomenator - r2.numenator*r1.denomenator;
	r.denomenator = r1.denomenator*r2.denomenator;
	return r;
}

Rational divRational(Rational r1, Rational r2)
{
	Rational r;
	r.numenator = r1.numenator*r2.denomenator;
	r.denomenator = r1.denomenator*r2.numenator;
	return r;
}

void reduse(Rational &r)
{
	int i = 1;
	while (r.numenator % i == 0 && r.denomenator % i == 0)
	{
		i++;
		if (r.numenator % i == 0 && r.denomenator % i == 0)
		{
			r.numenator = r.numenator / i;
			r.denomenator = r.denomenator / i;
		}
	}
}

int lcm(int first,int second)
{
	int i;
	for (int i = 0; first%second!=0; i++)
	{

	}
	return i;

}
