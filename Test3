#include<iostream>
#include<iomanip>
using namespace std;

struct Set
{
	int * data;
	int noOfElements;
	int capacity;
	char name[30];
};

struct SetArray
{
	Set *data;
	int noOfSets;
	int capacity;
};

void createSet(Set & s, int capacity=10, char *name="A");
void displaySet(Set &s);
int findSetElementIndex(Set &s);
bool isSetFull(Set &s);
bool isSetEmpty(Set &s);
bool addElement(Set &s, int element);
bool removeElement(Set &s, int element);
int findCommonElements(Set &s1, Set &s2);
Set findSetUnion(Set &s1, Set &s2);
void freeSet(Set &s);
void displaySetApplicationMenu();
void createSetDatabase(SetArray &sa, int size=10);
int findSetIndexInSetsDatabase(SetArray &sa, char * setName);
bool isSetsDatabaseEmpty(SetArray &sa);
bool isSetsDatabaseFull(SetArray &sa);
void doDeepCopy(Set &dest,Set source);
bool addSetInSetsDatabase(SetArray & sa, Set s);
bool removeSetInSetsDatabase(SetArray & sa, char * setName);
void displayAllSetsInSetDatabase(SetArray &sa);
bool addSetElementInSetsDatabase(SetArray &sa, char * setName, int element);
void displaySetInSetDatabase(SetArray &sa, char * setName);
void startSetApplication();
int main()
{
	startSetApplication();
	return 0;
}

void createSet(Set & s, int capacity = 10, char *name = "A")
{
	s.capacity = capacity;
	s.noOfElements = 0;
	s.data = new int[s.capacity];
	strcpy(s.name,name);
}

void displaySet(Set &s)
{
	cout << s.name << "=";
	cout << "{";
	for (int i = 0; i < s.noOfElements; i++)
	{
		cout << s.data[i];
	}
	cout << "\b}";
}

int findSetElementIndex(Set &s, int element)
{
	int i = 0;
	while (i < s.noOfElements && s.data[i] != element)
		i++;
	return i == s.noOfElements ? -1 : i;
}

bool isSetFull(Set &s)
{
	return s.noOfElements == s.capacity;
}

bool isSetEmpty(Set &s)
{
	return s.noOfElements == 0;
}

bool addElements(Set &s, int element)
{
	if (isSetFull(s))
		return false;
	if (findSetElementIndex(s, element) != 1)
		return false;
	s.data[s.noOfElements++] = element;
	return true;
}

bool removeElements(Set &s, int element)
{
	if (isSetEmpty(s))
		return false;
	int elementIndex = findSetElementIndex(s, element);
	if (elementIndex == -1)
		return false;
	s.data[elementIndex] = s.data[s.noOfElements - 1];
	s.noOfElements--;
	return true;
}

int findCommonElements(Set &s1, Set &s2)
{
	int i = 0, j = 0, count = 0;
	for (i = 0; i < s1.noOfElements; i++)
	{
		for (j = 0; j < s2.noOfElements; j++)
		{
			if (s1.data[i] == s2.data[j])
				count++;
		}
	}
	return count;
}

Set findSetUnion(Set&s1, Set&s2)
{
	int commonElementsCount = findCommonElements(s1, s2);
	Set result;
	createSet(result, s1.noOfElements + s2.noOfElements - commonElementsCount);
	for (int i = 0; i < s1.noOfElements; i++)
	{
		result.data[i] = s1.data[i];
		result.noOfElements++;
	}
	for (int j = 0; j < s2.noOfElements; j++)
	{
		addElement(result, s2.data[j]);
	}
	return result;
}

void freeSet(Set&s)
{
	if (s.data)
		delete[] s.data;
	s.data = 0;
	s.capacity = 0;
	s.noOfElements = 0;
}

void displaySetApplicationMenu()
{
	cout << "\n******Set Application*****";
	cout << "\nTo Create Set:....................Press 1";
	cout << "\nTo Add Element in Set.............Press 2";
	cout << "\nTo Remove Elements from Set.......Press 3";
	cout << "\nTo Display Set....................Press 4";
	cout << "\nTo Calculate Union of Set.........Press 5";
	cout << "\nTo Remove Set from Database.......Press 6";
	cout << "\nTo Display All Sets...............Press 7";
	cout << "\nTo Exit Application...............Press 0";
}

void createSetDatabase(SetArray &sa, int size)
{
	sa.capacity = size;
	sa.data = new Set[sa.capacity];
	sa.noOfSets=0;
}

int findSetIndexInSetsDatabase(SetArray&sa, char*setName)
{
	int i = 0;
	while (i<sa.noOfSets && strcmp(sa.data[i].name,setName)!=0)
	{
		i++;
	}
	return i == sa.noOfSets ? -1 : i;
}

bool isSetsDatabaseEmpty(SetArray &sa)
{
	return sa.noOfSets == 0;
}

bool isSetsDatabaseFull(SetArray &sa)
{
	return sa.noOfSets == sa.capacity;
}

void doDeepKeep(Set &dest,Set &source)
{
	createSet(dest, source.capacity, source.name);
	dest.noOfElements = 0;
	for (int i = 0; i < source.noOfElements; i++)
	{
		dest.data[i] = source.data[i];
	}
}

bool addSetInSetsDatabase(SetArray&sa, Set s)
{
	if (isSetsDatabaseFull(sa))
		return false;
	if (findSetIndexInSetsDatabase(sa, s.name) != -1)
		return false;
}
